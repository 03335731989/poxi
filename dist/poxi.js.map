{"version":3,"file":null,"sources":["../src/utils.js","../src/cfg.js","../src/Editor/Tile/index.js","../src/math.js","../src/Camera/index.js","../src/Editor/fill.js","../src/Editor/stack.js","../src/Editor/tiles.js","../src/Editor/Batch/Texture/index.js","../src/Editor/Batch/raw.js","../src/Editor/Batch/bounds.js","../src/Editor/Batch/index.js","../src/Editor/batch.js","../src/Editor/insert.js","../src/Editor/transform.js","../src/Editor/index.js","../src/Renderer/draw.js","../src/Renderer/shaders.js","../src/Renderer/setup.js","../src/Renderer/buffer.js","../src/Renderer/index.js","../src/render.js","../src/generate.js","../src/index.js"],"sourcesContent":["import {\r\n  WGL_SUPPORTED,\r\n  MAGIC_RGB_A_BYTE\r\n} from \"./cfg\";\r\n\r\n/**\r\n * @param {Class} cls\r\n * @param {Array} prot\r\n */\r\nexport function inherit(cls, prot) {\r\n  let key = null;\r\n  for (key in prot) {\r\n    if (prot[key] instanceof Function) {\r\n      cls.prototype[key] = prot[key];\r\n    }\r\n  };\r\n}\r\n\r\n/**\r\n * Returns a unique integer\r\n * @return {Number}\r\n */\r\nlet uidx = 0;\r\nexport function uid() {\r\n  return (uidx++);\r\n};\r\n\r\n/**\r\n * String to hashcode like on our island java\r\n * @param {String} str\r\n * @return {Number}\r\n */\r\nexport function hashFromString(str) {\r\n  let hash = 0;\r\n  let length = str.length;\r\n  for (let ii = 0; ii < length; ++ii) {\r\n    let ch = str.charCodeAt(ii);\r\n    hash = ((hash << 5) - hash) + ch;\r\n    hash |= 0;\r\n  }\r\n  return (hash);\r\n};\r\n\r\n/**\r\n * @param {Number} width\r\n * @param {Number} height\r\n * @return {CanvasRenderingContext2D}\r\n */\r\nexport function createCanvasBuffer(width, height) {\r\n  let canvas = document.createElement(\"canvas\");\r\n  canvas.width = width;\r\n  canvas.height = height;\r\n  let ctx = canvas.getContext(\"2d\");\r\n  applyImageSmoothing(ctx, false);\r\n  return (ctx);\r\n};\r\n\r\n/**\r\n * @param {CanvasRenderingContext2D} ctx\r\n * @param {Boolean} state\r\n */\r\nexport function applyImageSmoothing(ctx, state) {\r\n  ctx.imageSmoothingEnabled = state;\r\n  ctx.oImageSmoothingEnabled = state;\r\n  ctx.msImageSmoothingEnabled = state;\r\n  ctx.webkitImageSmoothingEnabled = state;\r\n};\r\n\r\n/**\r\n * @param {String} path\r\n * @param {Function} resolve\r\n */\r\nexport function loadImage(path, resolve) {\r\n  let img = new Image();\r\n  img.addEventListener(\"load\", () => {\r\n    resolve(img);\r\n  });\r\n  img.addEventListener(\"error\", () => {\r\n    throw new Error(\"Failed to load image ressource \" + path);\r\n  });\r\n  img.src = path;\r\n};\r\n\r\n/**\r\n * 0-255 => 0-1 with precision 1\r\n * @param {Number} a\r\n * @return {Number}\r\n */\r\nexport function alphaByteToRgbAlpha(a) {\r\n  return (Math.round((a * MAGIC_RGB_A_BYTE) * 10) / 10);\r\n};\r\n\r\n/**\r\n * Derivative of alphaByteToRgbAlpha\r\n * @param {Number} a\r\n * @return {Number}\r\n */\r\nexport function rgbAlphaToAlphaByte(a) {\r\n  return (Math.round((a / MAGIC_RGB_A_BYTE) * 10) / 10) | 0;\r\n};\r\n\r\n/**\r\n * @param {Array} color\r\n * @return {String}\r\n */\r\nexport function colorToRgbaString(color) {\r\n  let r = color[0];\r\n  let g = color[1];\r\n  let b = color[2];\r\n  let a = color[3];\r\n  return (`rgba(${r},${g},${b},${a})`);\r\n};\r\n\r\n/**\r\n * Hex to rgba\r\n * @param {String} hex\r\n */\r\nexport function hexToRgba(hex) {\r\n  let r = parseInt(hex.substring(1,3), 16);\r\n  let g = parseInt(hex.substring(3,5), 16);\r\n  let b = parseInt(hex.substring(5,7), 16);\r\n  return ([r,g,b,1]);\r\n};\r\n\r\n/**\r\n * Do rgba color arrays match\r\n * @param {Array} a\r\n * @param {Array} a\r\n * @return {Boolean}\r\n */\r\nexport function colorsMatch(a, b) {\r\n  return (\r\n    a[0] === b[0] &&\r\n    a[1] === b[1] &&\r\n    a[2] === b[2] &&\r\n    a[3] === b[3]\r\n  );\r\n};\r\n\r\n/**\r\n * Checks if a color array is fully transparent\r\n * @param {Array} color\r\n * @return {Boolean}\r\n */\r\nconst transparent = [0, 0, 0, 0];\r\nexport function isGhostColor(color) {\r\n  return (colorsMatch(color, transparent));\r\n};\r\n\r\n/**\r\n * @param {Number} a\r\n * @param {Number} b\r\n * @return {Number}\r\n */\r\nexport function sortAscending(a, b) {\r\n  return (a - b);\r\n};\r\n\r\n/**\r\n * @param {Number} a\r\n * @param {Number} b\r\n * @return {Number}\r\n */\r\nexport function sortDescending(a, b) {\r\n  return (b - a);\r\n};\r\n\r\n/**\r\n * Creates and returns an webgl context\r\n * @param {HTMLCanvasElement} canvas\r\n * @return {WebGLRenderingContext}\r\n */\r\nexport function getWGLContext(canvas) {\r\n  if (!WGL_SUPPORTED) {\r\n    throw new Error(\"Your browser doesn't support WebGL.\");\r\n  }\r\n  let opts = {\r\n    alpha: false,\r\n    antialias: false,\r\n    premultipliedAlpha: false,\r\n    stencil: false,\r\n    preserveDrawingBuffer: false\r\n  };\r\n  return (\r\n    canvas.getContext(\"webgl\", opts) ||\r\n    canvas.getContext(\"experimental-webgl\", opts)\r\n  );\r\n};\r\n","import { hashFromString } from \"./utils\";\r\n\r\nexport const TILE_SIZE = 8;\r\nexport const MIN_SCALE = 0.1;\r\nexport const MAX_SCALE = 32;\r\nexport const MAGIC_SCALE = .125;\r\n// trace ghost tiles by alpha=^2\r\nexport const UNSET_TILE_COLOR = 2;\r\nexport const BASE_TILE_COLOR = [0,0,0,0];\r\n\r\n// 32-bit ints are allowed at maximum\r\nexport const MAX_SAFE_INTEGER = (2 ** 31) - 1;\r\n\r\n// alpha byte to rgb-alpha conversion\r\nexport const MAGIC_RGB_A_BYTE = 0.00392;\r\n\r\n// factor when to hide the grid\r\nexport const HIDE_GRID = 0.0;\r\nexport const GRID_LINE_WIDTH = 0.25;\r\n\r\n// how fast we can scale with our mouse wheel\r\nexport const ZOOM_SPEED = 15;\r\n\r\n/**\r\n * If a tile batch exceeds the min size,\r\n * we buffer it inside a shadow canvas,\r\n * exceeding limit throws an out of bounds error\r\n */\r\nexport const BATCH_BUFFER_SIZE = {\r\n  MIN_W: 1,\r\n  MIN_H: 1,\r\n  MIN_L: 1\r\n};\r\n\r\nexport const DRAW_HASH = hashFromString(\"draw\");\r\n\r\n// Maximum allowed items inside stack\r\nexport const STACK_LIMIT = 255;\r\n\r\n// WebGL texture limit\r\nexport const WGL_TEXTURE_LIMIT = 1e3;\r\n\r\n// WebGL supported or not\r\nexport const WGL_SUPPORTED = (\r\n  typeof WebGLRenderingContext !== \"undefined\"\r\n);\r\n\r\n// WebAssembly supported or not\r\nexport const WASM_SUPPORTED = (\r\n  typeof WebAssembly !== \"undefined\"\r\n);\r\n","import { BASE_TILE_COLOR } from \"../../cfg\";\r\nimport { uid, colorsMatch } from \"../../utils\";\r\n\r\n/**\r\n * @class Tile\r\n */\r\nclass Tile {\r\n  constructor() {\r\n    this.x = 0;\r\n    this.y = 0;\r\n    this.id = uid();\r\n    this.cindex = 0;\r\n    this.colors = [BASE_TILE_COLOR];\r\n  }\r\n  /**\r\n   * @param {Array} color\r\n   * @return {Boolean}\r\n   */\r\n  colorMatchesWithTile(color) {\r\n    return (\r\n      colorsMatch(this.colors[this.cindex], color)\r\n    );\r\n  }\r\n  /**\r\n   * @param {Number} cindex\r\n   * @return {String}\r\n   */\r\n  getColorAsRgbaString(cindex) {\r\n    let c = this.colors[cindex || 0];\r\n    let r = c[0];\r\n    let g = c[1];\r\n    let b = c[2];\r\n    let a = c[3];\r\n    return (\r\n      `rgba(${r},${g},${b},${a})`\r\n    );\r\n  }\r\n};\r\n\r\nexport default Tile;\r\n","/**\r\n * @param {Number} x\r\n * @return {Number}\r\n */\r\nexport function zoomScale(x) {\r\n  return (\r\n    x >= 0 ? x + 1 :\r\n    x < 0 ? x + 1 :\r\n    x + 1\r\n  );\r\n}\r\n\r\n/**\r\n * @param {Number} x\r\n * @param {Number} t\r\n * @return {Number}\r\n */\r\nexport function roundTo(x, t) {\r\n  let i = 1 / t;\r\n  return (Math.round(x * i) / i);\r\n};\r\n\r\n/**\r\n * @param {Number} x1\r\n * @param {Number} y1\r\n * @param {Number} w1\r\n * @param {Number} h1\r\n * @param {Number} x2\r\n * @param {Number} y2\r\n * @param {Number} w2\r\n * @param {Number} h2\r\n * @return {Boolean}\r\n */\r\nexport function intersectRectangles(x1, y1, w1, h1, x2, y2, w2, h2) {\r\n  let x = Math.max(x1, x2);\r\n  let w = Math.min(x1 + w1, x2 + w2);\r\n  let y = Math.max(y1, y2);\r\n  let h = Math.min(y1 + h1, y2 + h2);\r\n  return (w >= x && h >= y);\r\n};\r\n","import {\r\n  MIN_SCALE,\r\n  MAX_SCALE,\r\n  ZOOM_SPEED,\r\n  MAGIC_SCALE\r\n} from \"../cfg\";\r\n\r\nimport { roundTo, zoomScale } from \"../math\";\r\n\r\n/**\r\n * @class Camera\r\n */\r\nclass Camera {\r\n\r\n  /**\r\n   * @param {Poxi} instance\r\n   */\r\n  constructor(instance) {\r\n    this.x = 0;\r\n    this.y = 0;\r\n    this.s = MIN_SCALE + 6;\r\n    this.dx = 0;\r\n    this.dy = 0;\r\n    this.lx = 0;\r\n    this.ly = 0;\r\n    this.width = 0;\r\n    this.height = 0;\r\n    this.instance = instance;\r\n  }\r\n\r\n  /**\r\n   * @param {Number} dir\r\n   */\r\n  scale(dir) {\r\n    let x = (dir * (ZOOM_SPEED / 1e2)) * zoomScale(this.s);\r\n    let oscale = this.s;\r\n    if (this.s + x <= MIN_SCALE) this.s = MIN_SCALE;\r\n    else if (this.s + x >= MAX_SCALE) this.s = MAX_SCALE;\r\n    else this.s += x;\r\n    this.s = roundTo(this.s, MAGIC_SCALE);\r\n    if (this.s >= (MAX_SCALE - 1) + .25) this.s = (MAX_SCALE - 1) + .25;\r\n    this.x -= (this.lx) * (zoomScale(this.s) - zoomScale(oscale));\r\n    this.y -= (this.ly) * (zoomScale(this.s) - zoomScale(oscale));\r\n    this.instance.redraw();\r\n  }\r\n\r\n  /**\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   */\r\n  click(x, y) {\r\n    let position = this.getRelativeOffset(x, y);\r\n    this.dx = x;\r\n    this.dy = y;\r\n    this.lx = position.x;\r\n    this.ly = position.y;\r\n  }\r\n\r\n  /**\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   */\r\n  drag(x, y) {\r\n    this.x += x - this.dx;\r\n    this.y += y - this.dy;\r\n    this.dx = x;\r\n    this.dy = y;\r\n    this.instance.redraw();\r\n  }\r\n\r\n  /**\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   */\r\n  getRelativeOffset(x, y) {\r\n    let xx = (x - this.x) / this.s;\r\n    let yy = (y - this.y) / this.s;\r\n    return ({\r\n      x: xx,\r\n      y: yy\r\n    });\r\n  }\r\n\r\n  /**\r\n   * @param {Number} width\r\n   * @param {Number} height\r\n   */\r\n  resize(width, height) {\r\n    this.width = width;\r\n    this.height = height;\r\n  }\r\n\r\n};\r\n\r\nexport default Camera;\r\n","import {\r\n  colorsMatch,\r\n  isGhostColor,\r\n  sortAscending,\r\n  colorToRgbaString,\r\n  createCanvasBuffer\r\n} from \"../utils\";\r\n\r\nimport { BASE_TILE_COLOR } from \"../cfg\";\r\n\r\n/**\r\n * Fill enclosed tile area\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @param {Array} color\r\n */\r\nexport function fillBucket(x, y, color) {\r\n  // TODO: add method to create temporary batches (e.g. insertRectangle by mouse)\r\n  color = color || [255, 255, 255, 1];\r\n  if (color[3] > 1) throw new Error(\"Invalid alpha color!\");\r\n  // differentiate between empty and colored tiles\r\n  let base = this.getStackRelativeTileColorAt(x, y) || BASE_TILE_COLOR;\r\n  // clicked tile color and fill colors matches, abort\r\n  if (colorsMatch(base, color)) return;\r\n  // clear undone batches, since we dont need them anymore\r\n  this.refreshStack();\r\n  // we now need the most recent boundings\r\n  this.updateGlobalBoundings();\r\n  // save the current stack index\r\n  let sindex = this.sindex;\r\n  this.pushTileBatchOperation();\r\n  let batch = this.getLatestTileBatchOperation();\r\n  // flood fill\r\n  let result = this.binaryFloodFill(x, y, base, color);\r\n  // convert buffer into batched raw buffer\r\n  batch.createRawBufferAt(result.buffer, result.x, result.y);\r\n  // after filling, finally update the boundings to get the batch's size\r\n  batch.updateBoundings();\r\n  // make sure we only create a raw buffer if we got tiles to draw onto\r\n  if (batch.tiles.length) this.batchTilesToRawBuffer(batch, color);\r\n  // finalizing a batch also deletes the batch if we didn't change anything\r\n  this.finalizeBatchOperation();\r\n  // infinity got detected, but some batches could be drawn before, so clear them first\r\n  if (false) {\r\n    // remove our recent batch if it didn't got removed yet\r\n    if (sindex < this.sindex) {\r\n      this.undo();\r\n      this.refreshStack();\r\n    }\r\n    // finally create a background batch\r\n    this.fillBackground(color);\r\n  }\r\n  return;\r\n};\r\n\r\n/**\r\n * Uses preallocated binary grid with the size of the absolute boundings\r\n * of our working area. In the next step we trace \"alive\" cells at the grid,\r\n * then we take the boundings of the used/filled area of our grid and crop out\r\n * the relevant part. Then we convert the filled grid area into a raw buffer\r\n * TODO: Fails with negative coordinates and infinity\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @param {Array} base\r\n * @param {Array} color\r\n * @return {Object}\r\n */\r\nexport function binaryFloodFill(x, y, base, color) {\r\n  let bounds = this.boundings;\r\n  let bx = bounds.x;\r\n  let by = bounds.y;\r\n  let gw = bounds.w;\r\n  let gh = bounds.h;\r\n  let isEmpty = base[3] === 0;\r\n  let gridl = gw * gh;\r\n\r\n  // allocate and do a basic fill onto the grid\r\n  let grid = new Uint8ClampedArray(gw * gh);\r\n  for (let ii = 0; ii < gridl; ++ii) {\r\n    let xx = ii % gw;\r\n    let yy = (ii / gw) | 0;\r\n    let color = this.getTileColorAt(bx + xx, by + yy);\r\n    if (isEmpty) {\r\n      if (color !== null) continue;\r\n    } else {\r\n      if (color === null) continue;\r\n      if (!(base[0] === color[0] && base[1] === color[1] && base[2] === color[2])) continue;\r\n    }\r\n    // fill tiles with 1's if we got a color match\r\n    grid[yy * gw + xx] = 1;\r\n  };\r\n\r\n  // trace connected tiles by [x,y]=2\r\n  let queue = [{x, y}];\r\n  while (queue.length > 0) {\r\n    let point = queue.pop();\r\n    let x = point.x;\r\n    let y = point.y;\r\n    let idx = y * gw + x;\r\n    // detected infinite filling, skip and return true=^infinite\r\n    //if (!this.pointInsideAbsoluteBoundings(x, y)) return (true);\r\n    // set this grid tile to 2, if it got traced earlier as a color match\r\n    if (grid[idx] === 1) grid[idx] = 2;\r\n    let nn = (y-1) * gw + x;\r\n    let ee = y * gw + (x+1);\r\n    let ss = (y+1) * gw + x;\r\n    let ww = y * gw + (x-1);\r\n    if (nn < gridl && grid[nn] === 1) queue.push({x, y:y-1});\r\n    if (ee < gridl && grid[ee] === 1) queue.push({x:x+1, y});\r\n    if (ss < gridl && grid[ss] === 1) queue.push({x, y:y+1});\r\n    if (ww < gridl && grid[ww] === 1) queue.push({x:x-1, y});\r\n  };\r\n\r\n  // calculate crop factor\r\n  let px = [];\r\n  let py = [];\r\n  for (let ii = 0, length = grid.length; ii < length; ++ii) {\r\n    let xx = ii % gw;\r\n    let yy = (ii / gw) | 0;\r\n    if (grid[ii] !== 2) continue;\r\n    px.push(xx);\r\n    py.push(yy);\r\n  };\r\n  px.sort(sortAscending);\r\n  py.sort(sortAscending);\r\n  // calculate position\r\n  let sx = px[0] | 0;\r\n  let sy = py[0] | 0;\r\n  // calculate rectangle size\r\n  let ww = ((px[px.length - 1] - sx) | 0) + 1;\r\n  let hh = ((py[py.length - 1] - sy) | 0) + 1;\r\n\r\n  // convert cropped area into raw buffer\r\n  let buffer = createCanvasBuffer(ww, hh);\r\n  buffer.fillStyle = colorToRgbaString(color);\r\n  for (let ii = 0; ii < ww * hh; ++ii) {\r\n    let xx = ii % ww;\r\n    let yy = (ii / ww) | 0;\r\n    let gx = sx + xx;\r\n    let gy = sy + yy;\r\n    if (grid[gy * gw + gx] !== 2) continue;\r\n    buffer.fillRect(\r\n      xx, yy, 1, 1\r\n    );\r\n  };\r\n\r\n  // finally free things from memory\r\n  grid = null;\r\n  px = null; py = null;\r\n\r\n  return ({\r\n    x: sx,\r\n    y: sy,\r\n    width: ww,\r\n    height: hh,\r\n    buffer: buffer\r\n  });\r\n};\r\n\r\n/**\r\n * Sets a batch to background, appends the given bg color\r\n * and generates a camera width and height based buffered canvas\r\n * @param {Array} color\r\n */\r\nexport function fillBackground(color) {\r\n  let isempty = isGhostColor(color);\r\n  this.pushTileBatchOperation();\r\n  let batch = this.getLatestTileBatchOperation();\r\n  batch.isBackground = true;\r\n  batch.renderBackground(this.camera.width, this.camera.height, color);\r\n  batch.updateBoundings();\r\n  this.finalizeBatchOperation();\r\n};\r\n","import { STACK_LIMIT } from \"../cfg\";\r\n\r\n/**\r\n * @param {Object} op\r\n */\r\nexport function enqueue(op) {\r\n  // our stack index is out of position\r\n  // => clean up all more recent batches\r\n  this.refreshStack();\r\n  this.stack.push(op);\r\n  this.redo();\r\n  this.undo();\r\n  this.redo();\r\n  // free the stack if necessary\r\n  if (this.stack.length >= STACK_LIMIT / 4) {\r\n    //throw new Error(\"Stack overflow!\");\r\n  }\r\n};\r\n\r\n/**\r\n * Manually refresh the stack,\r\n * clear future operations etc.\r\n */\r\nexport function refreshStack() {\r\n  if (this.sindex < this.stack.length - 1) {\r\n    this.dequeue(this.sindex, this.stack.length - 1);\r\n  } else {\r\n    this.stack.splice(this.sindex + 1, this.stack.length);\r\n  }\r\n  this.updateGlobalBoundings();\r\n};\r\n\r\n/**\r\n * Dequeue items from stack\r\n * @param {Number} from\r\n * @param {Number} to\r\n */\r\nexport function dequeue(from, to) {\r\n  from = from + 1;\r\n  let count = (to - (from - 1));\r\n  let batches = this.batches;\r\n  // free all following (more recent) tile batches\r\n  for (let ii = count; ii > 0; --ii) {\r\n    let batch = this.batches.splice(from + ii - 1, 1)[0];\r\n    // free batch from memory\r\n    if (batch.buffer.texture instanceof WebGLTexture) {\r\n      batch.tiles = [];\r\n      batch.buffer.view = null;\r\n      batch.buffer.data = null;\r\n      batch.buffer.context = null;\r\n      this.renderer.destroyTexture(batch.buffer.texture);\r\n      batch.buffer.texture = null;\r\n      batch.buffer = null;\r\n    }\r\n    batch = null;\r\n    this.refreshBatches();\r\n    this.stack.splice(from + ii - 1, 1);\r\n  };\r\n};\r\n\r\n/**\r\n * @param {Array} op\r\n * @param {Boolean} state\r\n */\r\nexport function fire(op, state) {\r\n  op.batch.tiles.map((tile) => {\r\n    let cindex = tile.cindex;\r\n    if (state) {\r\n      // redo\r\n      tile.cindex -= (tile.cindex > 0 ? 1 : 0);\r\n    } else {\r\n      // undo\r\n      tile.cindex += (tile.cindex < tile.colors.length - 1 ? 1 : 0);\r\n    }\r\n  });\r\n};\r\n\r\nexport function currentStackOperation() {\r\n  return (this.stack[this.sindex]);\r\n};\r\n\r\nexport function undo() {\r\n  if (this.sindex >= 0) {\r\n    let op = this.currentStackOperation();\r\n    this.fire(op, false);\r\n    this.sindex--;\r\n  }\r\n};\r\n\r\nexport function redo() {\r\n  if (this.sindex < this.stack.length - 1) {\r\n    this.sindex++;\r\n    let op = this.currentStackOperation();\r\n    this.fire(op, true);\r\n  }\r\n};\r\n","import {\r\n  TILE_SIZE,\r\n  BASE_TILE_COLOR,\r\n  UNSET_TILE_COLOR\r\n} from \"../cfg\";\r\n\r\nimport { roundTo } from \"../math\";\r\n\r\nimport Tile from \"./Tile/index\";\r\n\r\n/**\r\n * Set ctrl+a mode=true\r\n */\r\nexport function selectAll() {\r\n  this.modes.selectAll = true;\r\n};\r\n\r\n/**\r\n * Save last mouse position globally\r\n * @param {Number} x\r\n * @param {Number} y\r\n */\r\nexport function hover(x, y) {\r\n  this.mx = x;\r\n  this.my = y;\r\n};\r\n\r\n/**\r\n * Erase a tile by mouse offset\r\n * @param {Number} x\r\n * @param {Number} y\r\n */\r\nexport function eraseTileAtMouseOffset(x, y) {\r\n  let position = this.getRelativeOffset(x, y);\r\n  this.eraseTileAt(position.x, position.y);\r\n};\r\n\r\n/**\r\n * Erase a tile at given relative position\r\n * @param {Number} x\r\n * @param {Number} y\r\n */\r\nexport function eraseTileAt(x, y) {\r\n  let tile = this.getStackRelativeTileAt(x, y);\r\n  this.pushTileBatchOperation();\r\n  if (tile !== null) {\r\n    let color = tile.colors.shift();\r\n    this.createBatchTileAt(tile.x, tile.y, [0,0,0,0]);\r\n  }\r\n  this.finalizeBatchOperation();\r\n};\r\n\r\n/**\r\n * @param {Number} x\r\n * @param {Number} y\r\n */\r\nexport function drawTileAtMouseOffset(x, y) {\r\n  if (this.modes.draw) {\r\n    let position = this.getRelativeOffset(x, y);\r\n    this.createBatchTileAt(position.x, position.y, this._fillStyle);\r\n  }\r\n};\r\n\r\n/**\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @param {Array} color\r\n * @return {Tile}\r\n */\r\nexport function drawTileAt(x, y, color) {\r\n  this.pushTileBatchOperation();\r\n  this.createBatchTileAt(x|0, y|0, color);\r\n  this.finalizeBatchOperation();\r\n};\r\n\r\n/**\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Object}\r\n */\r\nexport function getRelativeOffset(x, y) {\r\n  let rpos = this.camera.getRelativeOffset(x, y);\r\n  let tpos = this.getTileOffsetAt(rpos.x, rpos.y);\r\n  return (tpos);\r\n};\r\n\r\n/**\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Tile}\r\n */\r\nexport function createTileAtMouseOffset(x, y) {\r\n  let position = this.getRelativeOffset(x, y);\r\n  let tile = this.createTileAt(position.x, position.y);\r\n  return (tile);\r\n};\r\n\r\n/**\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Tile}\r\n */\r\nexport function createTileAt(x, y) {\r\n  let tile = new Tile();\r\n  if (!this.offsetExceedsIntegerLimit(x, y)) {\r\n    tile.x = x | 0;\r\n    tile.y = y | 0;\r\n  } else {\r\n    throw new Error(\"Tile position exceeds 32-bit integer limit!\");\r\n  }\r\n  return (tile);\r\n};\r\n\r\n/**\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Tile}\r\n */\r\nexport function getTileByMouseOffset(x, y) {\r\n  let position = this.getRelativeOffset(x, y);\r\n  let tile = this.getTileAt(position.x, position.y);\r\n  return (tile);\r\n};\r\n\r\n/**\r\n * Gets non-relative (stack independant) tile by given position\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Tile}\r\n */\r\nexport function getTileAt(x, y) {\r\n  let batches = this.batches;\r\n  for (let ii = 0; ii < batches.length; ++ii) {\r\n    let idx = batches.length - 1 - ii; // reversed\r\n    let batch = batches[idx].tiles;\r\n    for (let jj = 0; jj < batch.length; ++jj) {\r\n      let tile = batch[jj];\r\n      if (tile.x === x && tile.y === y) {\r\n        return (tile);\r\n      }\r\n    };\r\n  };\r\n  return (null);\r\n};\r\n\r\n/**\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Tile}\r\n */\r\nexport function getStackRelativeTileByMouseOffset(x, y) {\r\n  let position = this.getRelativeOffset(x, y);\r\n  let tile = this.getStackRelativeTileAt(position.x, position.y);\r\n  return (tile);\r\n};\r\n\r\n/**\r\n * Gets stack relative (absolute) tile by given position\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Tile}\r\n */\r\nexport function getStackRelativeTileAt(x, y) {\r\n  let sindex = this.sindex;\r\n  let batches = this.batches;\r\n  for (let ii = 0; ii < batches.length; ++ii) {\r\n    let idx = batches.length - 1 - ii; // reversed\r\n    let batch = batches[idx].tiles;\r\n    if (sindex - idx < 0) continue;\r\n    for (let jj = 0; jj < batch.length; ++jj) {\r\n      let tile = batch[jj];\r\n      if (tile.x === x && tile.y === y) {\r\n        return (tile);\r\n      }\r\n    };\r\n  };\r\n  return (null);\r\n};\r\n\r\n/**\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Object}\r\n */\r\nexport function getTileOffsetAt(x, y) {\r\n  let half = TILE_SIZE / 2;\r\n  let xx = roundTo(x - half, TILE_SIZE);\r\n  let yy = roundTo(y - half, TILE_SIZE);\r\n  return ({\r\n    x: xx / TILE_SIZE,\r\n    y: yy / TILE_SIZE\r\n  });\r\n};\r\n\r\n/**\r\n * Get tile by it's id\r\n * @param {Number} id\r\n * @return {Tile}\r\n */\r\nexport function getTileById(id) {\r\n  let batches = this.batches;\r\n  for (let ii = 0; ii < batches.length; ++ii) {\r\n    let tiles = batches[ii].tiles;\r\n    for (let jj = 0; jj < tiles.length; ++jj) {\r\n      let tile = tiles[jj];\r\n      if (tile.id === id) return (tile);\r\n    };\r\n  };\r\n  return (null);\r\n};\r\n\r\n/**\r\n * Returns rnd(0-255) rgba color array with a=1\r\n * @return {Array}\r\n */\r\nexport function getRandomRgbaColors() {\r\n  let cmax = 256;\r\n  let r = (Math.random() * cmax) | 0;\r\n  let g = (Math.random() * cmax) | 0;\r\n  let b = (Math.random() * cmax) | 0;\r\n  return ([r, g, b, 1]);\r\n};\r\n\r\n/**\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Array}\r\n */\r\nexport function getTileColorAt(x, y) {\r\n  let batches = this.batches;\r\n  for (let ii = 0; ii < batches.length; ++ii) {\r\n    let idx = batches.length - 1 - ii; // reversed\r\n    let batch = batches[idx];\r\n    let color = batch.getTileColorAt(x, y);\r\n    if (color !== null) return (color);\r\n  };\r\n  return (null);\r\n};\r\n\r\n/**\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Array}\r\n */\r\nexport function getStackRelativeTileColorAt(x, y) {\r\n  let sindex = this.sindex;\r\n  let batches = this.batches;\r\n  for (let ii = 0; ii < batches.length; ++ii) {\r\n    let idx = batches.length - 1 - ii; // reversed\r\n    let batch = batches[idx];\r\n    if (sindex - idx < 0) continue;\r\n    let color = batch.getTileColorAt(x, y);\r\n    if (color !== null) return (color);\r\n  };\r\n  return (null);\r\n};\r\n\r\n/**\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Array}\r\n */\r\nexport function getStackRelativeTileColorByMouseOffset(x, y) {\r\n  let position = this.getRelativeOffset(x, y);\r\n  return (this.getStackRelativeTileColorAt(position.x, position.y));\r\n};\r\n","/**\r\n * @class Texture\r\n */\r\nclass Texture {\r\n  /**\r\n   * @param {CanvasRenderingContext2D} buffer\r\n   */\r\n  constructor(buffer) {\r\n    let view = buffer.canvas;\r\n    this.view = view;\r\n    this.texture = null;\r\n    this.context = buffer;\r\n    this.data = buffer.getImageData(0, 0, view.width, view.height).data;\r\n  }\r\n};\r\n\r\nexport default Texture;\r\n","import { alphaByteToRgbAlpha } from \"../../utils\";\r\n\r\nimport Tile from \"../Tile/index\";\r\nimport Texture from \"./Texture/index\";\r\n\r\n/**\r\n * @param {CanvasRenderingContext2D}\r\n * @param {Number} x\r\n * @param {Number} y\r\n */\r\nexport function createRawBufferAt(ctx, x, y) {\r\n  let view = ctx.canvas;\r\n  this.x = x;\r\n  this.y = y;\r\n  this.width = view.width;\r\n  this.height = view.height;\r\n  this.isBuffered = true;\r\n  this.isRawBuffer = true;\r\n  this.isBackground = false;\r\n  this.buffer = new Texture(ctx);\r\n};\r\n\r\n/**\r\n * Warning: does not update boundings!\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @param {Array} color\r\n */\r\nexport function createRawTileAt(x, y, color) {\r\n  let tile = new Tile();\r\n  tile.x = x;\r\n  tile.y = y;\r\n  tile.colors[0] = color;\r\n  // push in without updating boundings each time\r\n  this.tiles.push(tile);\r\n};\r\n\r\n/**\r\n * Access cached imageData\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Array}\r\n */\r\nexport function getRawColorAt(x, y) {\r\n  // normalize our point\r\n  let xx = x - this.x;\r\n  let yy = y - this.y;\r\n  // abort if point isn't inside our buffer boundings\r\n  if (\r\n    (xx < 0 || xx >= this.width) ||\r\n    (yy < 0 || yy >= this.height)\r\n  ) return (null);\r\n  // now extract the data\r\n  let data = this.buffer.data;\r\n  // imagedata array is 1d\r\n  let idx = (yy * this.width + xx) * 4;\r\n  // get each color value\r\n  let r = data[idx + 0];\r\n  let g = data[idx + 1];\r\n  let b = data[idx + 2];\r\n  let a = data[idx + 3];\r\n  let color = [r, g, b, alphaByteToRgbAlpha(a)];\r\n  // dont return anything if we got no valid color\r\n  if (a <= 0) return (null);\r\n  // finally return the color array\r\n  return (color);\r\n};\r\n","import { sortAscending } from \"../../utils\";\r\nimport { BATCH_BUFFER_SIZE } from \"../../cfg\";\r\nimport { intersectRectangles } from \"../../math\";\r\n\r\n/**\r\n * Determine if we should buffer the batch or not\r\n * Buffering a batch takes only in place, when drawImage is likely\r\n * faster than the (faster for single tiles) fillRect method\r\n * @return {Boolean}\r\n */\r\nexport function exceedsBoundings() {\r\n  if (this.tiles.length >= BATCH_BUFFER_SIZE.MIN_L) return (true);\r\n  let size = this.getBoundings();\r\n  return (\r\n    size.w - 1 >= BATCH_BUFFER_SIZE.MIN_W ||\r\n    size.h - 1 >= BATCH_BUFFER_SIZE.MIN_H\r\n  );\r\n};\r\n\r\n/**\r\n * Check if points lies inside the batch\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Boolean}\r\n */\r\nexport function pointInsideBoundings(x, y) {\r\n  if (this.isBackground) return (true);\r\n  let state = intersectRectangles(\r\n    this.x, this.y, this.width, this.height,\r\n    x, y, 0, 0\r\n  );\r\n  return (state);\r\n};\r\n\r\n/**\r\n * Updates the batch's relative position and size\r\n * @return {Void}\r\n */\r\nexport function updateBoundings() {\r\n  // dont calculate sizes of raw buffers\r\n  if (this.isRawBuffer) return;\r\n  // background boundings are infinite\r\n  if (this.isBackground) {\r\n    this.x = this.y = this.width = this.height = Infinity;\r\n    return;\r\n  }\r\n  let info = this.getBoundings();\r\n  this.x = info.x;\r\n  this.y = info.y;\r\n  this.width = info.w;\r\n  this.height = info.h;\r\n  return;\r\n};\r\n\r\n/**\r\n * Calculate cropped size of given batch\r\n * @return {Object}\r\n */\r\nexport function getBoundings() {\r\n  // raw buffers have static bounding\r\n  if (this.isRawBuffer) {\r\n    return ({\r\n      x: this.x,\r\n      y: this.y,\r\n      w: this.width,\r\n      h: this.height\r\n    });\r\n  }\r\n  let px = [];\r\n  let py = [];\r\n  let tiles = this.tiles;\r\n  for (let ii = 0; ii < tiles.length; ++ii) {\r\n    let tile = tiles[ii];\r\n    px.push(tile.x);\r\n    py.push(tile.y);\r\n  };\r\n  px.sort(sortAscending);\r\n  py.sort(sortAscending);\r\n  let idx = px.length-1;\r\n  // calculate rectangle position\r\n  let xx = px[0] | 0;\r\n  let yy = py[0] | 0;\r\n  // calculate rectangle size\r\n  let ww = ((px[idx] - px[0]) | 0) + 1;\r\n  let hh = ((py[idx] - py[0]) | 0) + 1;\r\n  return ({\r\n    x: xx,\r\n    y: yy,\r\n    w: ww,\r\n    h: hh\r\n  });\r\n};\r\n","import {\r\n  uid,\r\n  inherit,\r\n  createCanvasBuffer\r\n} from \"../../utils\";\r\n\r\nimport Texture from \"./Texture/index\";\r\n\r\nimport * as _raw from \"./raw\";\r\nimport * as _bounds from \"./bounds\";\r\n\r\n/**\r\n * @class Batch\r\n */\r\nclass Batch {\r\n  constructor() {\r\n    this.id = uid();\r\n    this.x = 0;\r\n    this.y = 0;\r\n    this.width = 0;\r\n    this.height = 0;\r\n    this.index = 0;\r\n    this.tiles = [];\r\n    // background related, see 'renderBackground'\r\n    this.buffer = null;\r\n    this.bgcolor = null;\r\n    this.bgbuffer = null;\r\n    this.isBuffered = false;\r\n    // This property indicates, if only the canvas buffer is available to us\r\n    // e.g. used for inserted sprite images\r\n    this.isRawBuffer = false;\r\n    // If the batch should appear everywhere on the screen\r\n    this.isBackground = false;\r\n  }\r\n};\r\n\r\n/**\r\n * Batch is completely empty\r\n * @return {Boolean}\r\n */\r\nBatch.prototype.isEmpty = function() {\r\n  return (\r\n    !this.isBuffered &&\r\n    !this.isRawBuffer &&\r\n    !this.isBackground &&\r\n    this.tiles.length <= 0\r\n  );\r\n};\r\n\r\n/**\r\n * @param {Tile} tile\r\n */\r\nBatch.prototype.addTile = function(tile) {\r\n  this.tiles.push(tile);\r\n  this.updateBoundings();\r\n};\r\n\r\n/**\r\n * Get tile at relative position\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Tile}\r\n */\r\nBatch.prototype.getTileAt = function(x, y) {\r\n  let tiles = this.tiles;\r\n  let length = tiles.length;\r\n  for (let ii = 0; ii < length; ++ii) {\r\n    let tile = tiles[ii];\r\n    if (tile.x === x && tile.y === y) return (tile);\r\n  };\r\n  return (null);\r\n};\r\n\r\n/**\r\n * Get tile color from buffered batch\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Array}\r\n */\r\nBatch.prototype.getTileColorAt = function(x, y) {\r\n  // nothing buffered and no tiles\r\n  if (this.isEmpty()) return (null);\r\n  // use image data for raw buffers\r\n  if (this.isRawBuffer) {\r\n    let color = this.getRawColorAt(x, y);\r\n    if (color !== null) return (color);\r\n  }\r\n  // return background color if batch is a filled background\r\n  if (this.isBackground) return (this.bgcolor);\r\n  // search tile based\r\n  let tile = this.getTileAt(x, y);\r\n  if (tile !== null) return (tile.colors[tile.cindex]);\r\n  return (null);\r\n};\r\n\r\n/**\r\n * Creates a cropped canvas buffer\r\n */\r\nBatch.prototype.renderBuffer = function() {\r\n  let buffer = createCanvasBuffer(this.width, this.height);\r\n  let bx = this.x | 0;\r\n  let by = this.y | 0;\r\n  let tiles = this.tiles;\r\n  for (let ii = 0; ii < tiles.length; ++ii) {\r\n    let tile = tiles[ii];\r\n    let color = tile.colors[tile.cindex];\r\n    let xx = (tile.x - bx) | 0;\r\n    let yy = (tile.y - by) | 0;\r\n    buffer.fillStyle = tile.getColorAsRgbaString();\r\n    buffer.fillRect(\r\n      xx, yy,\r\n      1|0, 1|0\r\n    );\r\n  };\r\n  this.buffer = new Texture(buffer);\r\n  this.isBuffered = true;\r\n  this.updateBoundings();\r\n};\r\n\r\n/**\r\n * @param {Number} width\r\n * @param {Number} height\r\n * @param {Array} color\r\n */\r\nBatch.prototype.renderBackground = function(width, height, color) {\r\n  let buffer = createCanvasBuffer(width, height);\r\n  let r = color[0];\r\n  let g = color[1];\r\n  let b = color[2];\r\n  let a = color[3];\r\n  buffer.fillStyle = `rgba(${r},${g},${b},${a})`;\r\n  buffer.fillRect(\r\n    0, 0,\r\n    width, height\r\n  );\r\n  this.bgcolor = color;\r\n  this.bgbuffer = buffer.canvas;\r\n};\r\n\r\ninherit(Batch, _raw);\r\ninherit(Batch, _bounds);\r\n\r\nexport default Batch;\r\n","import {\r\n  TILE_SIZE,\r\n  UNSET_TILE_COLOR,\r\n  BATCH_BUFFER_SIZE\r\n} from \"../cfg\";\r\n\r\nimport {\r\n  uid,\r\n  colorsMatch,\r\n  sortAscending,\r\n  createCanvasBuffer\r\n} from \"../utils\";\r\n\r\nimport { intersectRectangles } from \"../math\";\r\n\r\nimport Tile from \"./Tile/index\";\r\nimport Batch from \"./Batch/index\";\r\n\r\n/**\r\n * Push in a new batch operation\r\n */\r\nexport function pushTileBatchOperation() {\r\n  let batch = new Batch();\r\n  this.batches.push(batch);\r\n};\r\n\r\n/**\r\n * Refreshes all batch indexes\r\n */\r\nexport function refreshBatches() {\r\n  let batches = this.batches;\r\n  for (let ii = 0; ii < batches.length; ++ii) {\r\n    let batch = batches[ii];\r\n    batch.index = ii;\r\n  };\r\n};\r\n\r\n/**\r\n * Take the latest tile batch, buffer it (if exceeds bound sizes)\r\n * and finally push it into the operation stack\r\n * @return {Void}\r\n */\r\nexport function finalizeBatchOperation() {\r\n  let offset = this.batches.length - 1;\r\n  let batch = this.batches[offset];\r\n  if (batch.exceedsBoundings() && !batch.isRawBuffer) {\r\n    batch.renderBuffer();\r\n  } else {\r\n    // dont push batch into stack if batch is empty\r\n    if (batch.isEmpty() && !batch.isBackground) {\r\n      this.batches.splice(offset, 1);\r\n      this.refreshBatches();\r\n      return;\r\n    }\r\n    // got a background fill batch, check if we have to push it into the stack\r\n    if (batch.isBackground) {\r\n      let last = this.batches[this.batches.length - 2];\r\n      // last operation was a background fill too, check if their colors match\r\n      if (last && last.isBackground) {\r\n        if (colorsMatch(batch.bgcolor, last.bgcolor)) return;\r\n      }\r\n    }\r\n  }\r\n  // Auto generate texture out of buffer\r\n  if (batch.buffer !== null) {\r\n    batch.buffer.texture = this.instance.renderer.bufferTexture(String(uid()), batch.buffer.view);\r\n  }\r\n  this.enqueue({\r\n    batch: batch\r\n  });\r\n  this.refreshBatches();\r\n  this.refreshStack();\r\n  return;\r\n};\r\n\r\n/**\r\n * @return {Batch}\r\n */\r\nexport function getLatestTileBatchOperation() {\r\n  let offset = this.batches.length - 1;\r\n  return (this.batches[offset]);\r\n};\r\n\r\n/**\r\n * Clear latest batch operation if empty\r\n * @return {Void}\r\n */\r\nexport function clearLatestTileBatch() {\r\n  if (!this.batches.length) return;\r\n  let batch = this.getLatestTileBatchOperation();\r\n  // latest batch operation is empty, remove so \r\n  if (!batch.tiles.length) {\r\n    let offset = this.batches.length - 1;\r\n    this.batches.splice(offset, 1);\r\n  }\r\n  return;\r\n};\r\n\r\n/**\r\n * @param {Number} x\r\n * @param {Number} y\r\n */\r\nexport function startBatchedDrawing(x, y) {\r\n  this.modes.draw = true;\r\n  let position = this.getRelativeOffset(x, y);\r\n  this.pushTileBatchOperation();\r\n  this.createBatchTileAt(position.x, position.y, this._fillStyle);\r\n};\r\n\r\n/**\r\n * Finally push the recently created batch into the stack\r\n * @param {Number} x\r\n * @param {Number} y\r\n */\r\nexport function stopBatchedDrawing(x, y) {\r\n  this.modes.draw = false;\r\n  this.finalizeBatchOperation();\r\n  this.clearLatestTileBatch();\r\n};\r\n\r\n/**\r\n * Main method to insert tiles into the active batch\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @param {Array} color\r\n * @return {Void}\r\n */\r\nexport function createBatchTileAt(x, y, color) {\r\n  // try to overwrite older tiles color\r\n  let otile = this.getTileAt(x, y);\r\n  let batch = this.getLatestTileBatchOperation();\r\n  // only push tile if necessary\r\n  if (otile !== null) {\r\n    if (\r\n      otile.colorMatchesWithTile(color) ||\r\n      otile.colors[otile.cindex][3] === UNSET_TILE_COLOR\r\n    ) return;\r\n  }\r\n  let tile = this.createTileAt(x, y);\r\n  tile.colors.unshift(color);\r\n  batch.addTile(tile);\r\n  return;\r\n};\r\n\r\n/**\r\n * Get batch by the given tile\r\n * @param {Tile} tile\r\n * @return {Batch}\r\n */\r\nexport function getBatchByTile(tile) {\r\n  let id = tile.id;\r\n  let batches = this.batches;\r\n  let x = tile.x;\r\n  let y = tile.y;\r\n  for (let ii = 0; ii < batches.length; ++ii) {\r\n    let batch = batches[ii];\r\n    let tiles = batch.tiles;\r\n    for (let jj = 0; jj < tiles.length; ++jj) {\r\n      let tile = tiles[jj];\r\n      if (tile.id === id) return (batch);\r\n    };\r\n  };\r\n  return null;\r\n};\r\n\r\n/**\r\n * Get batch by the given tile\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Batch}\r\n */\r\nexport function getStackRelativeBatchByPoint(x, y) {\r\n  let batches = this.batches;\r\n  let sindex = this.sindex;\r\n  for (let ii = 0; ii < batches.length; ++ii) {\r\n    let idx = batches.length - 1 - ii; // reversed\r\n    if (sindex < idx) continue;\r\n    let batch = batches[idx];\r\n    if (batch.isBackground) return (batch);\r\n    if (batch.pointInsideBoundings(x, y)) return (batch);\r\n  };\r\n  return null;\r\n};\r\n\r\n/**\r\n * Resize all background batches to stay smoothy\r\n * @param {Number} width\r\n * @param {Number} height\r\n */\r\nexport function resizeBackgroundBatches(width, height) {\r\n  let batches = this.batches;\r\n  for (let ii = 0; ii < batches.length; ++ii) {\r\n    let batch = batches[ii];\r\n    if (!batch.isBackground) continue;\r\n    batch.renderBackground(width, height, batch.bgcolor);\r\n  };\r\n};\r\n\r\n/**\r\n * Check whether a point lies inside the used editor area\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @return {Boolean}\r\n */\r\nexport function pointInsideAbsoluteBoundings(x, y) {\r\n  let bounds = this.boundings;\r\n  let state = intersectRectangles(\r\n    bounds.x, bounds.y, bounds.w, bounds.h,\r\n    x, y, 0, 0\r\n  );\r\n  return (state);\r\n};\r\n\r\n/**\r\n * @param {Array} batches\r\n * @return {Object}\r\n */\r\nexport function getAbsoluteBoundings(batches) {\r\n  let px = []; let py = []; let pw = []; let ph = [];\r\n  let sindex = this.sindex;\r\n  for (let ii = 0; ii < batches.length; ++ii) {\r\n    let batch = batches[ii];\r\n    if (sindex < ii) continue;\r\n    let info = batch.getBoundings();\r\n    px.push(info.x);\r\n    py.push(info.y);\r\n    pw.push(info.x + info.w);\r\n    ph.push(info.y + info.h);\r\n  };\r\n  px.sort(sortAscending);\r\n  py.sort(sortAscending);\r\n  pw.sort(sortAscending);\r\n  ph.sort(sortAscending);\r\n  // calculate rectangle position\r\n  let xx = px[0]|0;\r\n  let yy = py[0]|0;\r\n  // calculate rectangle size\r\n  let idx = pw.length-1;\r\n  let ww = (-xx + pw[idx]);\r\n  let hh = (-yy + ph[idx]);\r\n  return ({\r\n    x: xx,\r\n    y: yy,\r\n    w: ww,\r\n    h: hh\r\n  });\r\n};\r\n\r\n/**\r\n * Updates the global boundings of our stage, so we\r\n * always have access to our absolute stage boundings\r\n */\r\nexport function updateGlobalBoundings() {\r\n  let info = this.getAbsoluteBoundings(this.batches);\r\n  let bounds = this.boundings;\r\n  if (\r\n    info.x !== bounds.x ||\r\n    info.y !== bounds.y ||\r\n    info.w !== bounds.w ||\r\n    info.h !== bounds.h\r\n  ) {\r\n    bounds.x = info.x;\r\n    bounds.y = info.y;\r\n    bounds.w = info.w;\r\n    bounds.h = info.h;\r\n  }\r\n};\r\n\r\n/**\r\n * Check if given batch is inside camera view\r\n * @param {Batch} batch\r\n * @return {Boolean}\r\n */\r\nexport function isBatchInsideView(batch) {\r\n  let camera = this.camera;\r\n  let scale = camera.s;\r\n  let cw = camera.width;\r\n  let ch = camera.height;\r\n  let cx = camera.x;\r\n  let cy = camera.y;\r\n  let w = (batch.width * TILE_SIZE) * scale;\r\n  let h = (batch.height * TILE_SIZE) * scale;\r\n  let x = ((batch.x * TILE_SIZE) * scale) + cx;\r\n  let y = ((batch.y * TILE_SIZE) * scale) + cy;\r\n  // backgrounds are always visible\r\n  if (batch.isBackground) return (true);\r\n  return (\r\n    (x + w >= 0 && x <= cw) &&\r\n    (y + h >= 0 && y <= ch)\r\n  );\r\n};\r\n","import { UNSET_TILE_COLOR } from \"../cfg\";\r\nimport {\r\n  colorsMatch,\r\n  isGhostColor,\r\n  createCanvasBuffer\r\n} from \"../utils\";\r\n\r\nimport Texture from \"./Batch/Texture/index\";\r\n\r\n/**\r\n * Inserts stroked arc at given position\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @param {Number} radius\r\n * @param {Array} color\r\n */\r\nexport function strokeArc(x, y, radius, color) {\r\n  if (!color) color = [255, 255, 255, 1];\r\n  this.insertArc(x, y, radius, color);\r\n};\r\n\r\n/**\r\n * Inserts filled arc at given position\r\n * @param {Number} x1\r\n * @param {Number} y1\r\n * @param {Number} radius\r\n * @param {Array} color\r\n */\r\nexport function insertArc(x1, y1, radius, color) {\r\n  let x2 = radius;\r\n  let y2 = 0;\r\n  let err = 1 - x2; \r\n  this.pushTileBatchOperation();\r\n  for (; x2 >= y2;) {\r\n    this.createBatchTileAt(x2 + x1, y2 + y1, color);\r\n    this.createBatchTileAt(y2 + x1, x2 + y1, color);\r\n    this.createBatchTileAt(-x2 + x1, y2 + y1, color);\r\n    this.createBatchTileAt(-y2 + x1, x2 + y1, color);\r\n    this.createBatchTileAt(-x2 + x1, -y2 + y1, color);\r\n    this.createBatchTileAt(-y2 + x1, -x2 + y1, color);\r\n    this.createBatchTileAt(x2 + x1, -y2 + y1, color);\r\n    this.createBatchTileAt(y2 + x1, -x2 + y1, color);\r\n    y2++;\r\n    if (err <= 0) {\r\n      err += 2 * y2 + 1;\r\n    }\r\n    if (err > 0) {\r\n      x2--;\r\n      err += 2 * (y2 - x2) + 1;\r\n    }\r\n  };\r\n  this.finalizeBatchOperation();\r\n};\r\n\r\n/**\r\n * Inserts filled rectangle at given position\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @param {Number} width\r\n * @param {Number} height\r\n * @param {Array} color\r\n */\r\nexport function fillRect(x, y, width, height, color) {\r\n  if (!color) color = [255, 255, 255, 1];\r\n  this.insertRectangleAt(\r\n    x | 0, y | 0,\r\n    width | 0, height | 0,\r\n    color, true\r\n  );\r\n};\r\n\r\n/**\r\n * Inserts stroked rectangle at given position\r\n * @param {Number} x\r\n * @param {Number} y\r\n * @param {Number} width\r\n * @param {Number} height\r\n * @param {Array} color\r\n */\r\nexport function strokeRect(x, y, width, height, color) {\r\n  if (!color) color = [255, 255, 255, 1];\r\n  this.insertRectangleAt(\r\n    x | 0, y | 0,\r\n    width | 0, height | 0,\r\n    color, false\r\n  );\r\n};\r\n\r\n/**\r\n * Inserts rectangle at given position\r\n * @param {Number} x1\r\n * @param {Number} y1\r\n * @param {Number} x2\r\n * @param {Number} y2\r\n * @param {Array} color\r\n * @param {Boolean} filled\r\n */\r\nexport function insertRectangleAt(x1, y1, x2, y2, color, filled) {\r\n  let width = Math.abs(x2);\r\n  let height = Math.abs(y2);\r\n  this.pushTileBatchOperation();\r\n  let dx = (x2 < 0 ? -1 : 1);\r\n  let dy = (y2 < 0 ? -1 : 1);\r\n  let bx = x1;\r\n  let by = y1;\r\n  for (let yy = 0; yy < height; ++yy) {\r\n    for (let xx = 0; xx < width; ++xx) {\r\n      // ignore inner tiles if rectangle not filled\r\n      if (!filled) {\r\n        if (!(\r\n          (xx === 0 || xx >= width-1) ||\r\n          (yy === 0 || yy >= height-1))\r\n        ) continue;\r\n      }\r\n      this.createBatchTileAt(bx + xx * dx, by + yy * dy, color);\r\n    };\r\n  };\r\n  this.finalizeBatchOperation();\r\n};\r\n\r\n/**\r\n * Transforms passed canvas ctx into a single batch operation\r\n * Instead of drawing tiles for each pixel,\r\n * we just directly draw all of them into a canvas\r\n * @param {CanvasRenderingContext2D} ctx\r\n * @param {Number} x\r\n * @param {Number} y\r\n */\r\nexport function drawImage(ctx, x, y) {\r\n  let canvas = ctx.canvas;\r\n  let width = canvas.width;\r\n  let height = canvas.height;\r\n  let xx = 0;\r\n  let yy = 0;\r\n  // start ctx insertion from given position\r\n  let data = ctx.getImageData(0, 0, width, height).data;\r\n  let position = this.getRelativeOffset(x, y);\r\n  this.pushTileBatchOperation();\r\n  let batch = this.getLatestTileBatchOperation();\r\n  batch.createRawBufferAt(ctx, position.x, position.y);\r\n  this.finalizeBatchOperation();\r\n};\r\n","import { roundTo } from \"../math\";\r\nimport { createCanvasBuffer } from \"../utils\";\r\n\r\nimport Tile from \"./Tile/index\";\r\nimport Batch from \"./Batch/index\";\r\n\r\n/**\r\n * Shade or tint\r\n * @param {Batch} batch\r\n * @param {Number} factor\r\n */\r\nexport function applyColorLightness(batch, factor) {\r\n  let tiles = batch.tiles;\r\n  this.pushTileBatchOperation();\r\n  for (let ii = 0; ii < tiles.length; ++ii) {\r\n    let tile = tiles[ii];\r\n    let color = tile.colors[tile.cindex];\r\n    let t = factor < 0 ? 0 : 255;\r\n    let p = factor < 0 ? -factor : factor;\r\n    let r = (Math.round((t - color[0]) * p) + color[0]);\r\n    let g = (Math.round((t - color[1]) * p) + color[1]);\r\n    let b = (Math.round((t - color[2]) * p) + color[2]);\r\n    let a = color[3];\r\n    this.createBatchTileAt(tile.x, tile.y, [r,g,b,a]);\r\n  };\r\n  this.finalizeBatchOperation();\r\n};\r\n\r\n/**\r\n * Remove L shaped corners\r\n * http://deepnight.net/pixel-perfect-drawing/\r\n * @param {Batch} batch\r\n */\r\nexport function applyPixelSmoothing(batch) {\r\n  let tiles = batch.tiles;\r\n  for (let ii = 0; ii < tiles.length; ++ii) {\r\n    if (!(ii > 0 && ii + 1 < tiles.length)) continue;\r\n    let o = tiles[ii];\r\n    let e = tiles[ii + 1];\r\n    let w = tiles[ii - 1];\r\n    if (\r\n      (w.x === o.x  || w.y === o.y) &&\r\n      (e.x === o.x  || e.y === o.y) &&\r\n      (w.x !== e.x) && (w.y !== e.y)\r\n    ) {\r\n      tiles.splice(ii, 1);\r\n      ++ii;\r\n    }\r\n  };\r\n};\r\n","import { MAX_SAFE_INTEGER } from \"../cfg\";\r\n\r\nimport { inherit, hexToRgba } from \"../utils\";\r\n\r\nimport * as _fill from \"./fill\";\r\nimport * as _stack from \"./stack\";\r\nimport * as _tiles from \"./tiles\";\r\nimport * as _batch from \"./batch\";\r\nimport * as _insert from \"./insert\";\r\nimport * as _transform from \"./transform\";\r\n\r\n/**\r\n * @class Editor\r\n */\r\nclass Editor {\r\n\r\n  /**\r\n   * @param {Poxi} instance\r\n   */\r\n  constructor(instance) {\r\n    this.instance = instance;\r\n    this.renderer = instance.renderer;\r\n    this.modes = {\r\n      draw: false,\r\n      selectAll: false\r\n    };\r\n    this.batches = [];\r\n    // mouse position, negative to be hidden initially\r\n    this.mx = -1;\r\n    this.my = -1;\r\n    this._fillStyle = [255,255,255,1];\r\n    this.camera = instance.camera;\r\n    // stack related\r\n    this.sindex = -1;\r\n    this.stack = [];\r\n    this.boundings = {\r\n      x: 0, y: 0, w: 0, h: 0\r\n    };\r\n  }\r\n\r\n  /**\r\n   * @return {Array}\r\n   */\r\n  get fillStyle() {\r\n    return (this._fillStyle);\r\n  }\r\n  /**\r\n   * @param {*} value\r\n   */\r\n  set fillStyle(value) {\r\n    if (typeof value === \"string\") {\r\n      this._fillStyle = hexToRgba(value);\r\n    }\r\n    else if (value instanceof Array && value.length === 4) {\r\n      this._fillStyle = value;\r\n    }\r\n    else throw new Error(\"Unsupported or invalid color\");\r\n  }\r\n\r\n  /**\r\n   * @param {Number} x\r\n   * @param {Number} y\r\n   * @return {Boolean}\r\n   */\r\n  offsetExceedsIntegerLimit(x, y) {\r\n    return (\r\n      Math.abs(x) > MAX_SAFE_INTEGER || Math.abs(y) > MAX_SAFE_INTEGER\r\n    );\r\n  }\r\n\r\n};\r\n\r\ninherit(Editor, _fill);\r\ninherit(Editor, _stack);\r\ninherit(Editor, _tiles);\r\ninherit(Editor, _batch);\r\ninherit(Editor, _insert);\r\ninherit(Editor, _transform);\r\n\r\nexport default Editor;\r\n","/**\r\n * Clears the context\r\n */\r\nexport function clear() {\r\n  let gl = this.ctx;\r\n  gl.clearColor(1, 1, 1, 1);\r\n  gl.clear(gl.COLOR_BUFFER_BIT);\r\n};\r\n\r\n/**\r\n * Batch draw a texture\r\n * @param {Texture} tex\r\n * @param {Number} dx\r\n * @param {Number} dy\r\n * @param {Number} dw\r\n * @param {Number} dh\r\n */\r\nexport function drawImage(tex, dx, dy, dw, dh) {\r\n\r\n  dx = dx | 0;\r\n  dy = dy | 0;\r\n  dw = dw | 0;\r\n  dh = dh | 0;\r\n\r\n  let gl = this.ctx;\r\n  let buffers = this.buffers;\r\n  let program = this.psprite;\r\n\r\n  gl.uniform2f(\r\n    gl.getUniformLocation(program, \"uScale\"),\r\n    this.width, this.height\r\n  );\r\n\r\n  gl.uniform2f(\r\n    gl.getUniformLocation(program, \"uObjScale\"),\r\n    dw, dh\r\n  );\r\n\r\n  let pos = this.vertices.position;\r\n\r\n  for (let ii = 0; ii < 6; ++ii) {\r\n    pos[2 * ii + 0] = dx + (dw / 2);\r\n    pos[2 * ii + 1] = dy + (dh / 2);\r\n  };\r\n\r\n  gl.activeTexture(gl.TEXTURE0);\r\n  gl.bindTexture(gl.TEXTURE_2D, tex);\r\n\r\n  this.setAttribute(program, buffers.position, \"aObjCen\", 2, pos);\r\n\r\n  gl.drawArrays(gl.TRIANGLES, 0, 6);\r\n\r\n};\r\n\r\n/**\r\n * Resize\r\n */\r\nexport function resize() {\r\n  let width = this.camera.width;\r\n  let height = this.camera.height;\r\n  let gl = this.ctx;\r\n  let view = this.view;\r\n  this.width = width;\r\n  this.height = height;\r\n  view.width = width;\r\n  view.height = height;\r\n  gl.viewport(0, 0, width, height);\r\n  gl.enable(gl.BLEND);\r\n  gl.blendFunc(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA);\r\n};\r\n","export const SPRITE_VERTEX = `\r\n  precision lowp float;\r\n  uniform vec2 uScale;\r\n  uniform vec2 uObjScale;\r\n  attribute vec2 aObjCen;\r\n  attribute float aIdx;\r\n  varying vec2 uv;\r\n  void main(void) {\r\n    if (aIdx == 0.0) {\r\n      uv = vec2(0.0,0.0);\r\n    } else if (aIdx == 1.0) {\r\n      uv = vec2(1.0,0.0);\r\n    } else if (aIdx == 2.0) {\r\n      uv = vec2(0.0,1.0);\r\n    } else {\r\n      uv = vec2(1.0,1.0);\r\n    }\r\n    gl_Position = vec4(\r\n      -1.0 + 2.0 * (aObjCen.x + uObjScale.x * (-0.5 + uv.x)) / uScale.x,\r\n      1.0 - 2.0 * (aObjCen.y + uObjScale.y * (-0.5 + uv.y)) / uScale.y,\r\n      0.0, 1.0\r\n    );\r\n  }\r\n`;\r\n\r\nexport const SPRITE_FRAGMENT = `\r\n  precision lowp float;\r\n  uniform sampler2D uSampler;\r\n  varying vec2 uv;\r\n  void main(void) {\r\n    gl_FragColor = texture2D(uSampler, uv);\r\n    if (gl_FragColor.a < 0.1) discard;\r\n  }\r\n`;\r\n\r\nexport const GRID_VERTEX = `\r\n  precision lowp float;\r\n  attribute vec2 a_position;\r\n  void main(void) {\r\n    vec2 zeroToOne = a_position;\r\n    vec2 zeroToTwo = zeroToOne * 2.0;\r\n    vec2 clipSpace = zeroToTwo - 1.0;\r\n    gl_Position = vec4(clipSpace * vec2(1, -1), 0, 1);\r\n  }\r\n`;\r\n\r\nexport const GRID_FRAGMENT = `\r\n  precision lowp float;\r\n  uniform float uScale;\r\n  void main(void) {\r\n    float m = 8.0 * uScale;\r\n    vec3 c = vec3(1.0, 1.0, 1.0);\r\n    if (mod(gl_FragCoord.x, m) < 1.0 || mod(gl_FragCoord.y, m) < 1.0) {\r\n      float g = 0.8;\r\n      c = vec3(g, g, g);\r\n    }\r\n    gl_FragColor = vec4(c, 1.0);\r\n    if (gl_FragColor.r == 1.0) discard;\r\n  }\r\n`;\r\n","import { getWGLContext } from \"../utils\";\r\nimport { WGL_TEXTURE_LIMIT } from \"../cfg\";\r\n\r\nimport {\r\n  GRID_VERTEX,\r\n  GRID_FRAGMENT,\r\n  SPRITE_VERTEX,\r\n  SPRITE_FRAGMENT\r\n} from \"./shaders\";\r\n\r\n/**\r\n * @param {HTMLCanvasElement} view \r\n */\r\nexport function setup(view) {\r\n  this.view = view;\r\n  let gl = getWGLContext(this.view);\r\n  gl.disable(gl.DEPTH_TEST);\r\n  gl.disable(gl.CULL_FACE);\r\n  this.ctx = gl;\r\n  this.buildShaders();\r\n  this.resize();\r\n};\r\n\r\n/**\r\n * Build da shaders\r\n */\r\nexport function buildShaders() {\r\n  this.psprite = this.createSpriteProgram();\r\n};\r\n\r\nexport function createSpriteProgram() {\r\n  let ctx = this.ctx;\r\n  let size = WGL_TEXTURE_LIMIT;\r\n  let program = ctx.createProgram();\r\n  let vshader = ctx.createShader(ctx.VERTEX_SHADER);\r\n  let fshader = ctx.createShader(ctx.FRAGMENT_SHADER);\r\n\r\n  this.compileShader(vshader, SPRITE_VERTEX);\r\n  this.compileShader(fshader, SPRITE_FRAGMENT);\r\n\r\n  ctx.attachShader(program, vshader);\r\n  ctx.attachShader(program, fshader);\r\n  ctx.linkProgram(program);\r\n\r\n  let buffers = this.buffers;\r\n  let vertices = this.vertices;\r\n  let idxs = vertices.idx = new Float32Array(size * 6);\r\n  vertices.position = new Float32Array(size * 12);\r\n\r\n  buffers.idx = ctx.createBuffer();\r\n  buffers.position = ctx.createBuffer();\r\n  for (let ii = 0; ii < size; ii++) {\r\n    idxs[6 * ii + 0] = 0;\r\n    idxs[6 * ii + 1] = 1;\r\n    idxs[6 * ii + 2] = 2;\r\n    idxs[6 * ii + 3] = 1;\r\n    idxs[6 * ii + 4] = 2;\r\n    idxs[6 * ii + 5] = 3;\r\n  };\r\n\r\n  this.setAttribute(program, buffers.idx, \"aIdx\", 1, idxs);\r\n  return (program);\r\n};\r\n\r\nexport function compileShader(shader, shader_src) {\r\n  let ctx = this.ctx;\r\n  ctx.shaderSource(shader, shader_src);\r\n  ctx.compileShader(shader);\r\n};\r\n\r\nexport function setAttribute(program, buffer, name, size, values) {\r\n  let ctx = this.ctx;\r\n  let attribute = ctx.getAttribLocation(program, name);\r\n  ctx.enableVertexAttribArray(attribute);\r\n  ctx.bindBuffer(ctx.ARRAY_BUFFER, buffer);\r\n  if (values.length > 0) {\r\n    ctx.bufferData(ctx.ARRAY_BUFFER, values, ctx.DYNAMIC_DRAW);\r\n  }\r\n  ctx.vertexAttribPointer(attribute, size, ctx.FLOAT, false, 0, 0);\r\n};\r\n","/**\r\n * Create texture buffer from canvas\r\n * @param {String} name\r\n * @param {HTMLCanvasElement} canvas\r\n * @return {WebGLTexture}\r\n */\r\nexport function bufferTexture(name, canvas) {\r\n  let ctx = this.ctx;\r\n  let texture = ctx.createTexture();\r\n  ctx.bindTexture(ctx.TEXTURE_2D, texture);\r\n  ctx.texImage2D(ctx.TEXTURE_2D, 0, ctx.RGBA, ctx.RGBA, ctx.UNSIGNED_BYTE, canvas);\r\n  ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_MAG_FILTER, ctx.NEAREST);\r\n  ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_MIN_FILTER, ctx.NEAREST);\r\n  ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_WRAP_S, ctx.CLAMP_TO_EDGE);\r\n  ctx.texParameteri(ctx.TEXTURE_2D, ctx.TEXTURE_WRAP_T, ctx.CLAMP_TO_EDGE);\r\n  if (this.textures[name] === void 0) {\r\n    this.textures[name] = texture;\r\n  }\r\n  return (this.textures[name]);\r\n};\r\n\r\n/**\r\n * Lookup for the texture inside our texture pool and free it from memory\r\n * @param {WebGLTexture} texture\r\n */\r\nexport function destroyTexture(texture) {\r\n  let gl = this.ctx;\r\n  let textures = this.textures;\r\n  for (let key in textures) {\r\n    let txt = textures[key];\r\n    if (txt !== texture) continue;\r\n    gl.deleteTexture(txt);\r\n    delete textures[key];\r\n    txt = null;\r\n    break;\r\n  };\r\n};\r\n","import { inherit } from \"../utils\";\r\n\r\nimport * as _draw from \"./draw\";\r\nimport * as _setup from \"./setup\";\r\nimport * as _buffer from \"./buffer\";\r\n\r\n/**\r\n * @class WGLRenderer\r\n */\r\nclass WGLRenderer {\r\n  /**\r\n   * @param {Poxi} instance\r\n   * @constructor\r\n   */\r\n  constructor(instance) {\r\n    // View to render on\r\n    this.view = null;\r\n    // Wgl context\r\n    this.ctx = null;\r\n    // Clear colors\r\n    this.colors = [0, 0, 0, 1];\r\n    // View sizes\r\n    this.width = 0;\r\n    this.height = 0;\r\n    // Vertice cache\r\n    this.vertices = {\r\n      idx: null,\r\n      position: null,\r\n      rotation: null\r\n    };\r\n    // Buffer cache\r\n    this.buffers = {\r\n      idxs: null,\r\n      position: null,\r\n      rotation: null\r\n    };\r\n    // Texture pool\r\n    this.textures = {};\r\n    // Save poxi instance\r\n    this.instance = instance;\r\n    // Save poxi camera\r\n    this.camera = this.instance.camera;\r\n  }\r\n};\r\n\r\ninherit(WGLRenderer, _draw);\r\ninherit(WGLRenderer, _setup);\r\ninherit(WGLRenderer, _buffer);\r\n\r\nexport default WGLRenderer;\r\n","import {\r\n  TILE_SIZE,\r\n  MIN_SCALE,\r\n  MAX_SCALE,\r\n  HIDE_GRID,\r\n  MAGIC_SCALE,\r\n  GRID_LINE_WIDTH\r\n} from \"./cfg\";\r\n\r\nimport {\r\n  createCanvasBuffer,\r\n  applyImageSmoothing\r\n} from \"./utils\";\r\n\r\nimport { roundTo } from \"./math\";\r\n\r\n/**\r\n * @param {Number} width\r\n * @param {Number} height\r\n */\r\nexport function resize(width, height) {\r\n  if (width >= 0) this.width = width;\r\n  if (height >= 0) this.height = height;\r\n  this.view.width = width;\r\n  this.view.height = height;\r\n  this.camera.resize(width, height);\r\n  // re-generate our bg\r\n  this.generateBackground();\r\n  // re-generate background batches\r\n  this.editor.resizeBackgroundBatches(width, height);\r\n  this.renderer.resize();\r\n  this.clear();\r\n  this.render();\r\n};\r\n\r\nexport function clear() {\r\n  this.renderer.clear();\r\n};\r\n\r\nexport function render() {\r\n  this.renderer.ctx.useProgram(this.renderer.psprite);\r\n  this.renderBackground();\r\n  this.renderBatches();\r\n  this.drawHoveredTile();\r\n  return;\r\n  if (this.camera.s > (MIN_SCALE + HIDE_GRID)) {\r\n    this.renderGrid();\r\n  }\r\n  this.renderBatches();\r\n  this.drawHoveredTile();\r\n  this.drawActiveCursor();\r\n  this.renderStats();\r\n};\r\n\r\nexport function renderBackground() {\r\n  let width = this.camera.width\r\n  let height = this.camera.height;\r\n  this.renderer.drawImage(\r\n    this.bg,\r\n    0, 0,\r\n    width, height\r\n  );\r\n};\r\n\r\nexport function renderGrid() {\r\n  let ctx = this.ctx;\r\n  let size = (TILE_SIZE*this.camera.s)|0;\r\n  let cx = this.camera.x | 0;\r\n  let cy = this.camera.y | 0;\r\n  let cw = this.camera.width;\r\n  let ch = this.camera.height;\r\n  ctx.lineWidth = GRID_LINE_WIDTH;\r\n  ctx.strokeStyle = \"rgba(51,51,51,0.75)\";\r\n  ctx.beginPath();\r\n  for (let xx = (cx%size)|0; xx < cw; xx += size) {\r\n    ctx.moveTo(xx, 0);\r\n    ctx.lineTo(xx, ch);\r\n  };\r\n  for (let yy = (cy%size)|0; yy < ch; yy += size) {\r\n    ctx.moveTo(0, yy);\r\n    ctx.lineTo(cw, yy);\r\n  };\r\n  ctx.stroke();\r\n  ctx.closePath();\r\n};\r\n\r\nexport function renderBatches() {\r\n  let sindex = this.editor.sindex;\r\n  let batches = this.editor.stack;\r\n  for (let ii = 0; ii < batches.length; ++ii) {\r\n    let batch = batches[ii].batch;\r\n    // batch index is higher than stack index, so ignore this batch\r\n    if (sindex - ii < 0) continue;\r\n    if (!this.editor.isBatchInsideView(batch)) continue;\r\n    /*if (batch.isBackground) this.drawBackgroundBatch(batch);\r\n    // draw batched buffer (faster, drawImage)\r\n    else if (batch.isBuffered) this.drawBatchedBuffer(batch);\r\n    // draw batched tiles (slower, fillRect)\r\n    else this.drawBatchedTiles(batch);*/\r\n    if (batch.isBuffered) this.drawBatchedBuffer(batch);\r\n  };\r\n  // draw currently drawn tiles\r\n  if (this.editor.modes.draw) {\r\n    let length = this.editor.batches.length;\r\n    if (length > 0) this.drawBatchedTiles(this.editor.batches[length - 1]);\r\n  }\r\n};\r\n\r\n/**\r\n * @return {Void}\r\n */\r\nexport function drawActiveCursor() {\r\n  if (!this.cursor) return; // no cursor available\r\n  let view = this.cursors[this.cursor];\r\n  if (!view) return; // cursor got not loaded yet\r\n  let ctx = this.ctx;\r\n  let drawing = this.editor.modes.draw;\r\n  // cursor gets a bit transparent when user is drawing\r\n  if (drawing === true) {\r\n    ctx.globalCompositeOperation = \"exclusion\";\r\n  }\r\n  let mx = this.editor.mx;\r\n  let my = this.editor.my;\r\n  let w = 1 + (view.width / 6) | 0;\r\n  let h = 1 + (view.height / 6) | 0;\r\n  let x = ((mx + (w / 2))) | 0;\r\n  let y = ((my + (h / 2))) | 0;\r\n  ctx.drawImage(\r\n    view,\r\n    0, 0,\r\n    view.width, view.height,\r\n    x, y,\r\n    w, h\r\n  );\r\n  if (drawing === true) {\r\n    ctx.globalCompositeOperation = \"source-over\";\r\n  }\r\n  return;\r\n};\r\n\r\n/**\r\n * @param {Batch} batch\r\n */\r\nexport function drawBackgroundBatch(batch) {\r\n  let ctx = this.ctx;\r\n  let buffer = batch.bgbuffer;\r\n  let width = buffer.width | 0;\r\n  let height = buffer.height | 0;\r\n  this.renderer.drawImage(\r\n    batch.buffer.texture,\r\n    0, 0,\r\n    width, height\r\n  );\r\n};\r\n\r\n/**\r\n * @param {Batch} batch\r\n */\r\nexport function drawBatchedTiles(batch) {\r\n  let cx = this.camera.x | 0;\r\n  let cy = this.camera.y | 0;\r\n  let cs = roundTo(this.camera.s, MAGIC_SCALE);\r\n  let ww = (TILE_SIZE * cs) | 0;\r\n  let hh = (TILE_SIZE * cs) | 0;\r\n  let ctx = this.ctx;\r\n  let tiles = batch.tiles;\r\n  for (let jj = 0; jj < tiles.length; ++jj) {\r\n    let tile = tiles[jj];\r\n    let x = ((cx + ((tile.x * TILE_SIZE) * cs))) | 0;\r\n    let y = ((cy + ((tile.y * TILE_SIZE) * cs))) | 0;\r\n    let color = tile.colors[tile.cindex];\r\n    let r = color[0];\r\n    let g = color[1];\r\n    let b = color[2];\r\n    let a = color[3];\r\n    ctx.fillStyle = tile.getColorAsRgbaString();\r\n    ctx.fillRect(x, y, ww, hh);\r\n  };\r\n};\r\n\r\n/**\r\n * @param {Batch} batch\r\n */\r\nexport function drawBatchedBuffer(batch) {\r\n  let cx = this.camera.x | 0;\r\n  let cy = this.camera.y | 0;\r\n  let cs = roundTo(this.camera.s, MAGIC_SCALE);\r\n  let bx = batch.x * TILE_SIZE;\r\n  let by = batch.y * TILE_SIZE;\r\n  let x = (cx + (bx * cs)) | 0;\r\n  let y = (cy + (by * cs)) | 0;\r\n  let ww = ((batch.width * TILE_SIZE) * cs) | 0;\r\n  let hh = ((batch.height * TILE_SIZE) * cs) | 0;\r\n  this.renderer.drawImage(\r\n    batch.buffer.texture,\r\n    x, y,\r\n    ww, hh\r\n  );\r\n};\r\n\r\nexport function drawHoveredTile() {\r\n  let cx = this.camera.x | 0;\r\n  let cy = this.camera.y | 0;\r\n  let cs = roundTo(this.camera.s, MAGIC_SCALE);\r\n  let ww = (TILE_SIZE * cs) | 0;\r\n  let hh = (TILE_SIZE * cs) | 0;\r\n  // apply empty tile hover color\r\n  let mx = this.editor.mx;\r\n  let my = this.editor.my;\r\n  let relative = this.editor.getRelativeOffset(mx, my);\r\n  let rx = relative.x * TILE_SIZE;\r\n  let ry = relative.y * TILE_SIZE;\r\n  let x = ((cx + GRID_LINE_WIDTH/2) + (rx * cs)) | 0;\r\n  let y = ((cy + GRID_LINE_WIDTH/2) + (ry * cs)) | 0;\r\n  this.renderer.drawImage(\r\n    this.hover,\r\n    x, y,\r\n    ww, hh\r\n  );\r\n};\r\n\r\nexport function renderStats() {\r\n  // render mouse hovered color\r\n  let mx = this.editor.mx;\r\n  let my = this.editor.my;\r\n  let relative = this.editor.getRelativeOffset(mx, my);\r\n  let rx = relative.x;\r\n  let ry = relative.y;\r\n  let color = this.editor.getStackRelativeTileColorAt(rx, ry);\r\n  this.ctx.fillStyle = \"#ffffff\";\r\n  this.ctx.fillText(`x:${rx}, y:${ry}`, 16, 32);\r\n  if (color !== null) {\r\n    let r = color[0];\r\n    let g = color[1];\r\n    let b = color[2];\r\n    let a = color[3];\r\n    this.ctx.fillStyle = `rgba(${r},${g},${b},${a})`;\r\n    this.ctx.fillRect(\r\n      6, 42, 8, 8\r\n    );\r\n    this.ctx.fillStyle = \"#ffffff\";\r\n    this.ctx.fillText(`${r},${g},${b},${a}`, 20, 48);\r\n  }\r\n  this.renderFPS();\r\n};\r\n\r\nexport function renderFPS() {\r\n  let now = Date.now();\r\n  let delta = now - this.last;\r\n  this.last = now;\r\n  this.ctx.fillText((1e3 / delta) | 0, 16, 16);\r\n};\r\n","import { TILE_SIZE } from \"./cfg\";\r\nimport { createCanvasBuffer } from \"./utils\";\r\n\r\nexport function generateHoveredTile() {\r\n  let ww = TILE_SIZE;\r\n  let hh = TILE_SIZE;\r\n  let buffer = createCanvasBuffer(ww, hh);\r\n  buffer.fillStyle = `rgba(255, 255, 255, 0.2)`;\r\n  buffer.fillRect(0, 0, ww, hh);\r\n  let texture = this.renderer.bufferTexture(\"hover\", buffer.canvas);\r\n  return (texture);\r\n};\r\n\r\nexport function generateBackground() {\r\n  if (this.bg instanceof WebGLTexture) {\r\n    this.renderer.destroyTexture(this.bg);\r\n  }\r\n  let size = 8;\r\n  let cw = this.width;\r\n  let ch = this.height;\r\n  let canvas = document.createElement(\"canvas\");\r\n  let ctx = canvas.getContext(\"2d\");\r\n  canvas.width = cw;\r\n  canvas.height = ch;\r\n  // dark rectangles\r\n  ctx.fillStyle = \"#1f1f1f\";\r\n  ctx.fillRect(0, 0, cw, ch);\r\n  // bright rectangles\r\n  ctx.fillStyle = \"#212121\";\r\n  for (let yy = 0; yy < ch; yy += size*2) {\r\n    for (let xx = 0; xx < cw; xx += size*2) {\r\n      // applied 2 times to increase saturation\r\n      ctx.fillRect(xx, yy, size, size);\r\n      ctx.fillRect(xx, yy, size, size);\r\n    };\r\n  };\r\n  for (let yy = size; yy < ch; yy += size*2) {\r\n    for (let xx = size; xx < cw; xx += size*2) {\r\n      ctx.fillRect(xx, yy, size, size);\r\n    };\r\n  };\r\n  let texture = this.renderer.bufferTexture(\"background\", canvas);\r\n  this.bg = texture;\r\n};\r\n","import Tile from \"./Editor/Tile/index\";\r\nimport Camera from \"./Camera/index\";\r\nimport Editor from \"./Editor/index\";\r\nimport Renderer from \"./Renderer/index\";\r\n\r\nimport {\r\n  DRAW_HASH\r\n} from \"./cfg\";\r\n\r\nimport {\r\n  inherit,\r\n  loadImage,\r\n  hashFromString,\r\n  colorToRgbaString,\r\n  createCanvasBuffer\r\n} from \"./utils\";\r\n\r\nimport * as _render from \"./render\";\r\nimport * as _generate from \"./generate\";\r\n\r\n/**\r\n * @class Poxi\r\n */\r\nclass Poxi {\r\n\r\n  /**\r\n   * @param {Object} obj\r\n   */\r\n  constructor(obj) {\r\n    this.bg = null;\r\n    this.hover = null;\r\n    this.view = null;\r\n    this.events = {};\r\n    this.camera = new Camera(this);\r\n    this.renderer = new Renderer(this);\r\n    this.editor = new Editor(this);\r\n    // fps\r\n    this.last = 0;\r\n    this.width = 0;\r\n    this.height = 0;\r\n    this.frames = 0;\r\n    this.states = {\r\n      paused: true\r\n    };\r\n    this.cursor = null;\r\n    this.cursors = {};\r\n    this.createView();\r\n    this.hover = this.generateHoveredTile();\r\n    // apply sizing\r\n    if (obj.width >= 0 && obj.height >= 0) {\r\n      this.resize(obj.width, obj.height);\r\n    } else {\r\n      this.resize(view.width, view.height);\r\n    }\r\n    this.init();\r\n  }\r\n\r\n  init() {\r\n    this.camera.scale(0);\r\n    this.renderLoop();\r\n  }\r\n\r\n  createView() {\r\n    let canvas = document.createElement(\"canvas\");\r\n    canvas.width = this.width;\r\n    canvas.height = this.height;\r\n    this.view = canvas;\r\n    this.renderer.setup(canvas);\r\n  }\r\n\r\n  renderLoop() {\r\n    // try again to render in 16ms\r\n    if (this.states.paused === true) {\r\n      setTimeout(() => this.renderLoop(), 16);\r\n    } else {\r\n      requestAnimationFrame(() => {\r\n        this.events[DRAW_HASH].fn();\r\n        this.frames++;\r\n        this.renderLoop();\r\n      });\r\n    }\r\n  }\r\n\r\n  /**\r\n   * @param {HTMLCanvasElement} el\r\n   */\r\n  isViewElement(el) {\r\n    return (\r\n      el && el instanceof HTMLCanvasElement\r\n    );\r\n  }\r\n\r\n  /**\r\n   * Event emitter\r\n   * @param {String} kind\r\n   * @param {Function} fn\r\n   */\r\n  on(kind, fn) {\r\n    if (!(typeof kind === \"string\")) {\r\n      throw new Error(\"Expected emitter kind to be string\");\r\n    }\r\n    if (!(fn instanceof Function)) {\r\n      throw new Error(\"Received emitter trigger is not a function\");\r\n    }\r\n    let hash = hashFromString(kind);\r\n    if (this.events[hash]) this.events[hash] = null; // safely clean old emitters\r\n    this.events[hash] = {\r\n      fn: fn\r\n    };\r\n    this.processEmitter(hash, fn);\r\n  }\r\n\r\n  /**\r\n   * @param {Number} hash\r\n   * @param {Function} fn\r\n   */\r\n  processEmitter(hash, fn) {\r\n    // begin drawing as soon as we got something to do there\r\n    if (this.frames === 0 && hash === DRAW_HASH) {\r\n      this.states.paused = false;\r\n    }\r\n  }\r\n\r\n  /**\r\n   * Simply redraws the stage synchronous\r\n   */\r\n  redraw() {\r\n    this.clear();\r\n    this.render();\r\n  }\r\n\r\n  /**\r\n   * Export the current view to base64 encoded png string\r\n   * @return {String}\r\n   */\r\n  exportAsDataUrl() {\r\n    let editor = this.editor;\r\n    let batches = editor.batches;\r\n    let bounds = editor.boundings;\r\n    let rx = bounds.x;\r\n    let ry = bounds.y;\r\n    let width = bounds.w;\r\n    let height = bounds.h;\r\n    let ctx = createCanvasBuffer(width, height);\r\n    let view = ctx.canvas;\r\n    let sindex = editor.sindex;\r\n    for (let ii = 0; ii < batches.length; ++ii) {\r\n      let batch = batches[ii];\r\n      // ignore future batches\r\n      if (sindex < ii) continue;\r\n      // background\r\n      if (batch.isBackground) {\r\n        ctx.fillStyle = colorToRgbaString(batch.bgcolor);\r\n        ctx.fillRect(\r\n          0, 0,\r\n          view.width, view.height\r\n        );\r\n        continue;\r\n      }\r\n      // buffer\r\n      if (batch.isBuffered) {\r\n        ctx.drawImage(\r\n          batch.buffer.view,\r\n          (batch.x - rx) | 0, (batch.y - ry) | 0,\r\n          batch.width | 0, batch.height | 0\r\n        );\r\n        continue;\r\n      }\r\n      // tiles\r\n      if (batch.tiles.length) {\r\n        let tiles = batch.tiles;\r\n        for (let ii = 0; ii < tiles.length; ++ii) {\r\n          let tile = tiles[ii];\r\n          let x = (tile.x - rx) | 0;\r\n          let y = (tile.y - ry) | 0;\r\n          let color = colorToRgbaString(tile.colors[tile.cindex]);\r\n          ctx.fillStyle = color;\r\n          ctx.fillRect(\r\n            x, y,\r\n            1, 1\r\n          );\r\n        };\r\n        continue;\r\n      }\r\n    };\r\n    return (view.toDataURL());\r\n  }\r\n\r\n  /**\r\n   * @param {String} kind\r\n   * @param {String} path\r\n   */\r\n  addCursor(kind, path) {\r\n    let cursor = this.cursor;\r\n    // reserve property, so we have access\r\n    // to it even before the image got loaded\r\n    this.cursors[kind] = null;\r\n    loadImage(path, (img) => {\r\n      this.cursors[kind] = img;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Set active cursor\r\n   * @param {String} kind\r\n   */\r\n  set activeCursor(kind) {\r\n    if (this.cursors[kind] !== void 0) {\r\n      this.cursor = kind;\r\n    } else {\r\n      this.cursor = null;\r\n    }\r\n  }\r\n\r\n};\r\n\r\ninherit(Poxi, _render);\r\ninherit(Poxi, _generate);\r\n\r\n// apply to window\r\nif (typeof window !== \"undefined\") {\r\n  window.Poxi = Poxi;\r\n} else {\r\n  throw new Error(\"Please run Poxi inside a browser\");\r\n}\r\n"],"names":["let","const","color","this","x","y","ww","ii","xx","yy","getRelativeOffset","tile","prototypeAccessors","drawImage","resize","clear","Renderer"],"mappings":"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"}